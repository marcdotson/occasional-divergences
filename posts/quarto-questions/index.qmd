---
title: "Quarto questions"
author: "Marc Dotson"
date: "2022-10-10"
description: |
  Everyone is talking about Quarto. Maybe you've read some blogs or watched a presentation or two, but you still have questions. I've attempted to (briefly) provide some answers.
categories:
  - quarto
  - r
image: Figures/example-quarto.png
slug: quarto-questions
---

It seems like everyone is talking about Quarto. Maybe you've read some blogs or watched a presentation or two, but you still have questions. In an attempt to provide some answers, I've put together and streamlined my notes in a way I hope is useful. This post is largely summarized from material presented in the [Getting Started with Quarto](https://rstudio-conf-2022.github.io/get-started-quarto/) and [From R Markdown to Quarto](https://rstudio-conf-2022.github.io/rmd-to-quarto/) workshops, along with the [Hello Quarto](https://www.rstudio.com/conference/2022/keynotes/collaborate-with-quarto/) keynote, and other talks at [rstudio::conf(2022)](https://www.rstudio.com/blog/talks-and-workshops-from-rstudio-conf-2022/). Other helpful sources are included at the bottom of the post. Most importantly, the [Quarto](https://quarto.org) website has *incredible* documentation.

But, if all of that feels like a *lot*, hopefully this can help ease you into things. This post is organized by the following questions and my best attempts to provide answers.

- What is Quarto?
- Should I switch from R Markdown to Quarto?
- How do I get started using Quarto?
- What are the benefits of using Quarto for _____?

## What is Quarto?

![](Figures/example-quarto.png)

A quarto is a book size that results from folding each printed sheet into four leaves. (The picture above is actually half an octavo, but the illustration still serves.) It's a real word. It means something. But we're giving it a new definition:

> Quarto is an open-source scientific and technical publishing system built on Pandoc.

Instead of writing a report or presentation in Word, PowerPoint, etc.; then running code in an R script; then saving output and visualizations; and then pasting them in the report or the presentation -- we can do it all in Quarto, a free system especially tailored to scientific and technical publishing. Pandoc is what makes it possible to take a single Quarto document and produce a report, presentation, website, etc.

For those in the know, Quarto is the next generation of R Markdown. However, instead of being tied to R, Quarto is multilingual, used with R, Python, Julia, and Observable from RStudio, VS Code, and Jupyter. To make it available across all of these languages, it accesses Pandoc via the command-line interface. It also makes use of Lua filters, which are extensions to Pandoc. That means instead of developing R packages to expand the functionality for R alone, development will happen in terms of Lua filters so functionality is available across languages.

If you are familiar with R Markdown, you are probably familiar with this pipeline: When you knit an `.rmd` file, knitr converts your text and R code into a Markdown file and then uses Pandoc to produce whatever output you've specified.

![](Figures/rmarkdown.jpg)

A `.qmd` file on the other hand can be composed of text and R, Python, and/or Julia code. Either knitr or jupyter will then convert your text and code into a Markdown file followed by Pandoc producing whatever output you've specified. 

![](Figures/quarto.jpg)

Quarto accomplishes this by being fully separate from the R ecosystem. You can even run it from the Shell/Terminal, if you want to. While it distances itself from being language-specific in order to set up a bigger tent and provide the benefits of R Markdown to Python and Julia users alike, a move consistent with the positioning of RStudio-turned-Posit, it does align more directly with Pandoc and makes more options available in the back-end.

## Should I switch from R Markdown to Quarto?

If you are an R Markdown power user, there might not be reason to move to Quarto. R Markdown will continue to be supported along with Quarto (in fact, the teams are the same at Posit). However, if you aren't a power user, moving to Quarto is likely the right call.

Quarto is not only compute-agnostic for those who are multilingual or work in a multilingual environment, it also natively incorporates much of the functionality and ease-of-use that has been developed in the R Markdown ecosystem. What that means for less-than-power-users is that Quarto has incorporated and streamlined much of what R Markdown has to offer right out-of-the-box, without the need to download a ton of additional specialty packages. In fact, Quarto is now included as part of the RStudio installation.

For example, if you've used R Markdown to create presentations, you've probably used or at least heard of xaringan. It's the most powerful R Markdown tool for creating presentations, and it can be incredibly finicky. If you know how to use it, great. If you don't know how to use it, just leapfrog to Quarto and start creating revealjs presentations immediately.

This all comes with one big caveat: There is no replacement for flexdashboards in Quarto just yet. It's something that is high on the priority list, but if a big part of your workflow requires the use of flexdashboards, it's not yet the time to make the switch from R Markdown.

## How do I get started using Quarto?

Content, structure, appearance, format?

- Content: Text, code, images.
- Structure: Paragraphs, lists, emphasis, etc. (Block elements with inline elements and metadata.)
- Appearance: Fonts, colors, layout.
- Format: Functionality.

Much of this is Quarto, but some of it comes straight out of pandoc. Use Quarto/Pandoc native attributes or HTML/CSS concepts.

CSS style-files using similar syntax, with key-value pairs?

Metadata (YAML), code, text.

Yet Another **Markup** Language.

Quarto introduces a kind of grammar of documents (based on HTML/CSS): **Block elements** with **inline elements** (or other blocks) and **metadata**. A block element needs to share a line by itself. Also, to further illustrate Quarto's adherence to Pandoc, Quarto uses an extended version of Pandoc Markdown rather than R Markdown's more limited Markdown. This includes:

- Superscript^2^, subscript~2~, ~~strike through~~, and [small caps]{.smallcaps}.
- [Links](https://pandoc.org/MANUAL.html) and images.
- Footnotes.
- Use `(@)` for numbered lists that can continue after a paragraph break.

Note that the visual editor (and its bugginess).

### Document Structure

To provide some consistency, there are generic block and inline elements and metadata. Think of blocks with their own inline and then metadata governing overall.

### The Bracketed Span

This is for generic inline elements. The term "span" refers to HTML/CSS for in-line elements.

![](Figures/bracketed-span.jpg)

- What content is in brackets that doesn't have parentheses after?

### The Fenced Div

This is for generic block elements. It's essentially a code chunk but for a block element. The term "div" for "division" refers to HTML/CSS for block elements.

![](Figures/fenced-div.jpg)

Not all output formats support generic blocks. Classes include callout blocks, column and margins, etc. Attributes include ncol, nrow, valign, width, fig-align, etc.

### YAML

YAML follows a `key: value` syntax.

YAML auto-completion with Quarto install.

## What are the benefits of using Quarto for _____?

Quarto Projects (including websites), with freeze options.

- What functionality can I add to slides by moving to Quarto/revealjs? Can I just leapfrog xaringan to revealjs?
- Can Quarto replicate my blog in a way that's simpler to manage?
- Can Quarto replicate what's included in my RA training instructions and paper template? Does it make it easier or is too early in development?

### Code Cells

Instead of R Markdown code chunk options, Quarto code cells use the hashpipe `#|` where the options follow YAML notation so that it's language-agnostic.

```{{r}}
#| echo: fenced
example_code
```

YAML auto-completion with Quarto install.

No caps -- just "false" for example.

echo: fenced to execute and see code, including back ticks.

Because we use YAML notation for code cell options, we can move them into the YAML under the `execute` key to apply to all cells in the document. This is a replacement to the set-up code chunk in R Markdown. We can also set options under the `knitr` key, including `R.options`.

Reuse named code cells.

### Presentations

RStudio Visual Editor works with revealjs (not the case with R Markdown presentation styles).

revealjs is the replacement for xaringan but with pandoc-native syntax.

Different level headers create different kinds of slides (e.g., title slides with a first level header). Plus lots of functionality comes from revealjs (which you can create using R Markdown as well).

- It includes **code animations** and **code highlighting**.
- Everything can fly into a slide incrementally.
- Auto animate?! This is how to animate code, by animating what changes between slides.
- Chalkboard?!!
- .fragment class.

PDF export, chalkboard, multiplex, code-line-numbers, and auto-animate revealjs options

### Documents

For a parameterized document, the `params` key is saved as a list with named elements that can be referenced within the document.

- code-fold and code-link.
- cache.
- Does Quarto handle tex styles? Does it create the .bib file automatically?

### Websites

Quarto Projects/Blogs/Websites, etc. Like an RStudio Project, with specific types, to automate/initialize the type-specific YAML. Built-in instead of having to deal with blogdown as an add-on, for example.

- Includes search automatically.
- Incremental functionality represented in the Quarto YAML.
- Can set `execute: freeze: true` to not re-run old blog posts, or `auto` to re-render only when the source changes. `cache` is another option.
- `quarto publish` works with Netlify!?

## Issues

- When will we have a flexdashboard equivalent for Quarto? Quarto plus Shiny UI? Dashboard builder? Instead of flexdashboard?
- Do we still have to render a Quarto document in the same folder as the associated project file? Or is this just a function of the fact that "Quarto documents reference from their existing folder/directory"? Can we use `here::here()` instead?
- Render on save?

## Additional Sources

Besides the [rstudio::conf(2022)](https://www.rstudio.com/blog/talks-and-workshops-from-rstudio-conf-2022/) workshops and keynote in addition to the [Quarto](https://quarto.org) documentation itself, here are a number of additional sources that I've found useful.

- [Blog in 100 seconds](https://www.youtube.com/watch?v=t8qtcDyCRFA)
- [Building a Blog with Quarto](https://ivelasq.quarto.pub/building-a-blog-with-quarto/)
- [Danielle Navarro's Blog](https://blog.djnavarro.net)

## Final thoughts



-----

### Marc Dotson

Marc is an assistant professor of marketing at the BYU Marriott School of Business. He graduated with an MSc from The London School of Economics and Political Science in 2009 and a PhD from The Ohio State University in 2016. His research interests include Bayesian inference, predictive modeling, consumer preference heterogeneity, and unstructured data. Marc teaches marketing analytics. You can find him on [Twitter](https://twitter.com/marcdotson) and [GitHub](https://github.com/marcdotson).

