---
title: "Reproducible environments for R and Python"
author: "Marc Dotson"
date: "2023-10-11"
description: |
  Reproducible environments are a pain, but {renv} makes things easy for R and works well with venv for Python. Add pyenv, and you should be covered.
categories:
  - r
  - python
image: figures/xkcd_python-env.png
slug: rep-env
---

Reproducible environments. If you're primarily a Pythonista, you're likely already familiar with the necessity. And the horror. XKCD did it best:

![](figures/xkcd_python-env.png){width=60% fig-align="center"}

If you're primarily an R user, you might not be familiar with either the necessity or the horror of reproducible environments. This post is about facilitating the former and minimizing the latter. I've written this primarily for R users, especially those who, like me, find themselves supplementing their existing R workflows with Python. We'll focus on using {renv} to create reproducible environments for R and Python, along with some venv and pyenv.

## What is a reproducible environment?

You already work in an environment. It's composed of the packages you use and their dependencies along with R and Python for a given project. What makes it reproducible is keeping track of *which* version of those packages, their dependencies, and R and Python you're using for your given project. While "keeping track" could happen in many different ways, ideally you want to keep track of your environment such that it can be easily *reproduced* on another machine, by you (including future you) or someone else.

Okay, but *why*? Packages change. Functions get deprecated. And R and Python continue to evolve. Just because your project code works now doesn't mean that it will work for someone else or in the future. (Technically, your environment could be extended to your operating system version as well, depending on the project, but worrying about machine images is beyond the scope of this post.) Ensuring your project environment is reproducible enables collaboration, future-proofing, and open science.

## R

There are many ways to create reproducible environments in R, but [{renv}](https://rstudio.github.io/renv/index.html) recently reached 1.0.0 and has a streamlined workflow that helps minimize the horror for both R and Python (more on that in a bit). As an R user, you should already be familiar with working in a [project](https://r4ds.hadley.nz/workflow-scripts.html#projects).

Once you have {renv} installed, get started with your existing project or a new project by calling `renv::init()`. This will create two essential items in your project's working directory:

1. A **lockfile** called `renv.lock`.
2. A **project library** called `/renv`.

More on both of these in a minute. An `.Rprofile` file is also created that will automatically run when you open your project and make sure you're using the correct reproducible environment. If for whatever reason you don't get a prompt in the Console saying that {renv} is running when you open your project after it's been initialized, you may have to jump start this by calling `renv::load()`. Also, please note that if you're using some sort of [version control](https://happygitwithr.com), you'll commit all three of these additions to your project (an automatically generated `/renv/.gitignore` file will make this simple if you're using Git).

It will help to think about creating a reproducible environment in two parts:

1. The version of R you're using for your project.
2. The version of the packages (and dependencies) you're using for your project.

Let's discuss each in turn.

### Version

If you're like me, you don't often think about which version of R you're using. I often wait for a little while after a new version is released to make sure there aren't any breaking problems with the packages and software I use most (I'm looking at you, compilers). I also find myself reminding students to *not* update to the most recent version of R mid-semester for that same reason. You probably just update R a few times a year, maybe notice the version number and its cute [Peanuts](https://en.wikipedia.org/wiki/Peanuts)-themed release name when you open a new instance, and call it good.

When you called `renv::init()`, the first thing that was recorded in the `renv.lock` **lockfile** (which tracks the versions of everything to make your environment reproducible) was the version of R you're using. The lockfile is a json, and those details will look something like this:

```
{
  "R": {
    "Version": "4.3.1",
    "Repositories": [
      {
        "Name": "CRAN",
        "URL": "https://packagemanager.posit.co/cran/latest"
      }
    ]
  }
}
```

While {renv} records this information to track your R version, it can't really help a collaborator or future you get this version of R because {renv} is running *inside* of R. However, this probably isn't an issue. You likely only have a single version of R installed at any given time. When you update R, you likely overwrite the old version with the new version. And that's probably enough. R is a specialized language that the operating system isn't using elsewhere and has from its beginning been committed to remaining backwards compatible. All of which to say, a version of R that is *at least* as current as the one you're using for your project will likely be sufficient for others, including future you.

That said, if you find yourself needing to maintain multiple versions of R on the same computer, you'll want to invest the time in a version management tool like [rig](https://github.com/r-lib/rig).

### Packages

It may come as a surprise, but I also don't often think about which version of packages I'm using. You might be similar. You might update your packages when prompted or do that manually once a year. Much like most R users maintain a single version of R, by default all packages are installed in a single, global library (where a library is simply a directory with installed packages) known as the **system library**. When you called `renv::init()`, the `/renv` folder that was created is now your **project library**. This helps highlight an important feature of reproducible workflows: Each project will have its own project library and thus be *isolated*. If two projects use different versions of the same package, they won't conflict with each other because they'll each have their own project library.

Well, not *exactly*. {renv} uses something called a **global package cache**. You only ever need to install the version of a given package once. If that same version is needed for another project, {renv} will just link your project library to the corresponding package version in that global cache.

So how do you track the version of the packages and their dependencies for your project? Once you've installed the packages you need for your project, call `renv::snapshot()`. This takes a snapshot of your package version and records them in the lockfile, along with the R version as shown above. Whenever you add new packages, or update the version of packages you're using, call `renv::snapshot()` to update the lockfile accordingly. When someone else is trying to reproduce your environment, once they have your project working directory, they simply need to call `renv::restore()` to install the correct version of the required packages.

I've tried to provide enough detail to explain why it works the way it does, but the workflow itself remains simple. Let's review:

1. Create a new lockfile and project library once by calling `renv::init()`.
2. Track installed package versions, and any changes to the project library, using `renv::snapshot()`.
3. Reproduce the environment by installing the correct project library with `renv::restore()`.

There are [many other functions](https://rstudio.github.io/renv/reference/index.html) available to manage specific problems or are at work behind the scenes. For example, whenever you open a new instance of a given project that uses {renv}, `renv::status()` will automatically run to check for inconsistencies between the lockfile and what is available in the project library. When issues are found, follow the prompts to address them. This may mean calling `renv::restore()` to get certain packages installed or using `renv::snapshot()` to resolve inconsistencies between what is actually being used in your project's code and what is being tracked in the lockfile.

## Python

Again, it's helpful to think about creating a reproducible environment in two parts:

1. The version of Python you're using for your project.
2. The version of the packages (and dependencies) you're using for your project.

Let's address each of these in turn.

### Version

Go over {renv} and its use for Python in the RStudio IDE.

- Does {renv} keep track of which version of R you're using?
- Pair with pyenv?
- Any helpful discussion of environments in WTF?
- Any references in the R and Python for the Modern Data Scientist?

::: {.callout-warning}
This is a callout with a title.
:::

The Python environment associated with the project will load automatically when using Python from R?

### Packages

Use `renv::use_python()` to tell {renv} to create and use a project-local Python environment. Assuming this is all through {reticulate}, it's stored easily as another part of the lockfile. Then all of the functions, `snapshot()`, `restore()`, etc. will operate for R and Python simultaneously.

- What is the relationship between renv and venv?
- A `requirements.txt` is added once `snapshot()` includes Python packages as well.

## Final thoughts

It's environments all the way down.

