---
title: "Maintaining environments with {renv}"
author: "Marc Dotson"
date: "2023-10-01"
description: |
  Environments are a pain, but {renv} makes things better. For R and Python!
categories:
  - r
  - python
image: Figures/mcmc_trace-gamma.png
slug: rep-env
---

Every package you install lives in your system library, accessible to all projects. However, packages change. Add a reproducible environment by creating a project library using the `{renv}` package.

- Initialize the project library once using `renv::init()`. This will create the `renv` folder (with its own `.gitignore`), a lockfile `renv.lock`, and an `.Rprofile` file.
- Once you've installed packages, add them to the project library using `renv::snapshot()`.
- To install the specific packages of an already-existing project library, use `renv::restore()`.
- To update all packages in the project library, call `renv::update()`. Make sure code is working with the updated packages before calling `renv::snapshot()` to update the lockfile.

Do you have to prune packages that are no longer used or does renv::snapshot() do that for you? The renv::dependencies() crawls the files to check for packages that are used while renv::status() will report issues found. Using renv::snapshot() will help resolve inconsistencies between what is used in the code and what is stored in the lockfile.

Read [here](https://rstudio.github.io/renv/index.html) for more on using `{renv}`, including creating and maintaining Python environments.

Recently in full release at 1.0.0. Implement for R and Python.

[https://rstudio.github.io/renv/index.html](link)

For *r*eproducible *env*ironment.

- `renv::init()` to create a project library `renv/library` and a lockfile `renv.lock`.
- `renv::snapshot()` to record packages and their sources in the lockfile.
- `renv::restore()` to reinstall the specific package versions recorded in the lockfile.

> You’ll then need to commit renv.lock, .Rprofile, renv/settings.json and renv/activate.R to version control, ensuring that others can recreate your project environment. If you’re using git, this is particularly simple because renv will create a .gitignore for you, and you can just commit all suggested files.

## What are environments?

### Python

Discuss Python study group and use of environments (see https://blog.jeremarc.com/posts/python-env/).

### R

System library where all packages are installed. {renv} makes it easy to create project libraries.

Go over {renv} and its use for Python in the RStudio IDE.
Any helpful discussion of environments in WTF?

### Python and R

How does {renv} work with a project that includes both R and Python? Any references in the R and Python for the Modern Data Scientist?

Let's gooooo!

Use `renv::use_python()` to tell {renv} to create and use a project-local Python environment. Assuming this is all through {reticulate}, it's stored easily as another part of the lockfile. Then all of the functions, snapshot(), restore(), etc. will operate for R and Python simultaneously.

## Final thoughts

