---
title: "Spinning up and using virtual machines for R and Python"
author: "Marc Dotson"
date: "2024-09-31"
description: |
  Breaking through computational bottlenecks can be challenging, but spinning up and using a virtual machine comes with its own set of problems. This post walks through the process of spinning up and using virtual machines for R and Python.
categories:
  - r
  - python
  - stan
  - compute
  - positron
image: figures/owl.png
slug: virtual-machines
---

It's not uncommon to run into computational bottlenecks when running models, Bayesian or otherwise. I've often had access to a dedicated computer or server for such tasks or, in classic academic fashion, I've been comfortable with letting models run for weeks. But these options aren't always available and they might not actually solve the problem. Cloud computing is clearly the solution. However, breaking into using cloud computing has made me feel the need to (with apologies) adapt the adage often applied to needing regular expressions: "If you have a problem that requires cloud computing, congratulations, you now have two problems.""

There are a number of cloud service providers, AWS arguably chief among them. However, AWS can do *everything* when what I really need is the ability to quickly spin up and temporarily use a virtual machine that can easily run R, Python, and often Stan. One of the primary reason VS Code has been so hyped is the use of its SSH extension for easily tunneling into and using such a virtual machine. However, the virtual machine needs to be spun up in the first place. Using cloud computing definitely feels like a *draw the rest of the owl* situation.

![](figures/owl.png){width=50% fig-align="center"}

In this post, I try to fill in the gaps and provide a gentle introduction to spinning up and using virtual machines that can run R and Python. Special thanks to Lizzy Nguyen and Andrew Heiss for helping me navigate all of this.

## Spinning up virtual machines

A virtual machine (VM) is a computer that isn't *actually* a computer---it's rented time on a server in a data center somewhere, hence it being "virtual." But before we can set (or spin) up a VM, we need to prepare the machine image we want to work with on the VM. This image is really a [reproducible environment](https://occasionaldivergences.com/posts/rep-env/) writ large: It needs to include not only the required programming languages and packages, but also the operating system and necesssary applications.

You can think of an image as a *snapshot* of everything you need to run your model. That means once you have an image, it can be used to run models isolated from everything else. These self-contained images are known as *containers*. Designed for development and production well beyond the scope of what we're discussing, the fact that they have everything they need to run in isolation means you can have multiple containers running on your computer, actual or virtual.

There are a number of applications for creating images and "containerizing" them, Docker arguably chief among them. But, to adapt Jenny Bryan's adage about for loops: "Someone needs to build an image, but it doesn't have to be you." There are a plethora of pre-built images...

### 1. Create/modify an image using Docker Compose?

- Here's one for just R and VS Code: https://github.com/RamiKrispin/vscode-r
- Here's an example from Andrew using R, Python, and Quarto: https://github.com/andrewheiss/example-r-python-quarto-docker
- Andrew's old blog post: https://www.andrewheiss.com/blog/2017/04/27/super-basic-practical-guide-to-docker-and-rstudio/index.html
- Create/modify an image template as a repo on GitHub so it can be connected to Docker Hub automatically for use in VM?

### 2. Use the image as a container when spinning up the VM?

- Does scaling the RAM happen automatically?

::: {.callout-note title="AWS is Too General"}
I feel like this is similar to the complaints I make about VS Code. AWS, like Azure and GCP (is it too general)? Can use AWS for *anything*. App hosting, etc. Including using GPU clusters and quantum computing! Cutting a cake with a chainsaw.

- Andrew Brown's AWS Certified Cloud Practitioner Certification Course: https://www.youtube.com/watch?v=SOTamWNgDKc&list=PLWKjhJtqVAbkzvvpY12KkfiIGso9A_Ixs&index=2
- Elastic Compute Cloud (EC2) for VM or Elastic Constainer Service (ECS) for an EC2 instance with Docker installed.
- What about higher performance computing services (HPC)? Does it only come in clusters? Would I need to use CloudShell?
- S3/RDS for storage.
- Have to pick an OS, instance type, add storage...Docker?
- Memory optimized VMs have large data sets in memory.

Digital Ocean? From Andrew:

- Look for a free tier or (initial credit)[https://cloud.digitalocean.com/registrations/new?refcode=f6fcd01aaffb].
- Like AWS, you'll have a team (root user) and members in that team, which will be your way to access and use the service.
- Provide links to documentation!
:::

## Using virtual machines

### 3. SSH tunnel in to use the container?

- SSH Tunneling with VS Code: https://www.youtube.com/watch?v=cOopQQIL8JU
- Is SSH tunneling available yet in Positron?

### 4. How do I get data into and out of the container?

Andrew likes to mount local folders to the docker container so he knows where everything rather than use official dev envirnoment tools that have more opaque file systems. That said, most of his work is for testing things for package development, not for computational resources.

## Final thoughts



