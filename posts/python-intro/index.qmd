---
title: "An introduction to Python for R users"
author: "Marc Dotson"
date: "2024-04-02"
description: |
  Most introductions to Python are written for new programmers. But if you already know another language already, it's easier to learn the new language with your known language employed as an analogy. This introduction to Python is written for R users.
categories:
  - r
  - python
# image: figures/xkcd_python-env.png
slug: python-intro
---

In classes and workshops over many years, I've taught introductions R. But in my new position, I'll need to be teaching in Python. This introduction to Python is really just a way for me to detail what I've learned about Python as an R user. But hopefully it proves useful to others as well.

Resources used:

- [VS Code with Python](https://github.com/RamiKrispin/vscode-python)
- [VS Code with R](https://github.com/RamiKrispin/vscode-r)
- Python for Data Analysis
- Python and R for the Modern Data Scientist
- Effective Polars?
- [Python Rgonomics](https://emilyriederer.netlify.app/post/py-rgo/)
- [Polars’ Rgonomic Patterns](https://emilyriederer.netlify.app/post/py-rgo-polars/)
- [Base Python Rgonomic Patterns](https://emilyriederer.netlify.app/post/py-rgo-base/)
- [A tidyverse R and polars Python side-by-side](https://robertmitchellv.com/blog/2022-07-r-python-side-by-side/r-python-side-by-side.html)
- [Tidy Data Manipulation: dplyr vs pandas](https://blog.tidy-intelligence.com/posts/dplyr-vs-pandas/)
- [Tidy Data Manipulation: dplyr vs polars](https://blog.tidy-intelligence.com/posts/dplyr-vs-polars/)
- [Tidy Data Visualization: ggplot2 vs seaborn](https://blog.tidy-intelligence.com/posts/ggplot2-vs-seaborn/)
- [Tidy Data Visualization: ggplot2 vs matplotlib](https://blog.tidy-intelligence.com/posts/ggplot2-vs-matplotlib/)
- the "Introduction to Data Science with Python" workshop
- the "Machine Learning and Deep Learning with Python" workshop

<!-- ![](figures/xkcd_python-env.png){width=60% fig-align="center"} -->

## Mindset

R is:

- Specialized language
- Developed by statisticians
- Lazy about efficiency
- Lazy about namespacing
- Functional programming
- Small and medium data
- Data wrangling and visualization
- Spacing is for convenience
- Dominated by Posit
- R Markdown and Quarto
- Consistency in the tidyverse
- "R Users" and "Tidy" code

Python is:

- General language
- Developed by computer scientists
- Obsessed with efficiency
- Obsessed with namespacing
- Object-oriented programming
- Small, medium, and large data
- Machine learning and deep learning
- Spacing is part of the syntax
- No single authority
- Jupyter Notebooks
- Inconsistent (i.e., no tidyverse)
- "Pythonistas" and "Pythonic" code

::: {.callout-tip title="Non-Standard Repositories"}

:::

## The CLI?

Learning to be okay with command line for installation.

## Installation and environments?

- pyenv and venv or pdm?
- VS Code or Posit's new code editor? Quarto as motivation.
- Reference my own reproducible environments post, but now just for Python.

## The (chosen) PyData stack

The Python data (i.e., PyData) stack refers to the ecosystem of packages that enables data analysis.

- NumPy is short for "Numerical Python." It includes arrays and efficient computation across arrays.
- pandas is short for "panel data." It is built on NumPy and adds data frames for tabular or "heterogeneous" data and is the most popular package for data wrangling.
- Polars is a newer package for data wrangling. It's name is an anagram of the query engine it uses (OLAP) and the language it's built in (Rust or rs).
- matplotlib provides a foundation for plotting.
- seaborn is built on matplotlib and integrates with pandas. seaborn.objects is a more consistent API based on grammar of graphics.
- scikit-learn is a machine learning library built on NumPy, SciPy, and matplotlib.

## Python basics?

- Code relies on white space not braces.
- Everything is an object, including imported modules (a module is a single file, while a package is a collection of modules in a directory).
- The assignment (or *binding*) operator is `=`.
- Attached functions called *methods* use the `.` notation following the object, `obj.some_method(x, y, z)`. Note that CmdStanR adopts this syntax. For example `model$sample()` in CmdStanR is `model.sample()` in CmdStanPy.
- Lists are the fundamental data class and are created with single square brackets.
- Objects aren't copied needlessly, they are just bound to the same underlying data structure.
- Many objects or *mutable*. Their contents can be changed.
- **Remember that Python is zero-indexed.**
- `NULL` is referred to as `None`. Other types include `str`, `bytes` (binary), `float`, `bool`, and `int`.

## Data wrangling

Polars. A Rust library with Python bindings. A query engine with a data frame API on top. Something of an answer to pandas problems. The backend is in Rust instead of NumPy. Built on chaining expressions inside contexts instead of working on Series. Good with small and medium data. Everything stored in Arrow formats, including improvements for storing strings. No row indices. Lazy instead of eager evaluation, including a benefit for chaining.

- Walkthrough? See the my own introduction to Python workshop with Python/R comparisons.

## Visualization

seaborn is a high-level interface to matplotlib. Originally focused on filling gaps in matplotlib’s feature set. Now it’s bringing some tidy philosophy to its plotting. Figure setups via motplotlib, plot function and parameters, axis parameters and decorations. Now seaborn.objects is more based on the underlying grammar of graphics. Start with a .Plot() and then add layers from the four families of methods: .Mark(), .Stat(), .Move(), .Scale().

- Walkthrough?

## Modeling

scikitlearn, etc.

- Walkthrough?

## Communication

In learning Python find something that provides real value quickly. This is the pitch for Shiny for Python. It has programmatic range with a consistent philosophy with reactivity. Streamlit is optimized for simple applications, like a parameterized Quarto document. Dash is built on stateless applications (i.e., independent components), like Shiny without reactive expressions where the different pieces can’t communicate. Django/Flask/FastAPI is great for large apps.

- Quarto.
- Shiny for Python?
- Walkthrough?

## Final thoughts

Conclude...and follow-up with advanced ____ for the R user?

