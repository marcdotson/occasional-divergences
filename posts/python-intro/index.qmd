---
title: "An introduction to Python for R users"
author: "Marc Dotson"
date: "2024-10-01"
description: |
  Most introductions to Python are written for new programmers. But if you already know another language, it's easier to learn Python using your known language as an analogy. This introduction to Python is written for R users.
categories:
  - python
  - r
image: figures/python.png
slug: python-intro
---

In classes and workshops over many years, I've taught analytics using R. But in my new position, I teach analytics using Python. This introduction to Python is for R users---primarily me, though I hope it proves useful to others as well.

![](figures/python-r.png){width=60% fig-align="center"}

There are incredible resources in this space, and I've drawn liberally from a number of them. As an overall introduction to Python, [*Python for Data Analysis*](https://wesmckinney.com/book/) is a go-to resource and the spiritual equivalent of [*R for Data Science*](https://r4ds.hadley.nz). I also really appreciate the work in [*Python and R for the Modern Data Scientist*](https://www.amazon.com/Python-Modern-Data-Scientist-Worlds/dp/1492093408), especially for the authors' clear espousing that this isn't an either/or situation---you can (and arguably *should*) use Python and R as complements.

I am especially indebted to Emily Riederer's blog series beginning with [Python Rgonomics](https://emilyriederer.netlify.app/post/py-rgo/) and subscribe to her philosophy of using tools in Python that are genuinely "Pythonic" while being consistent with the workflow and ergonomics of the best R has to offer. I am also grateful to extra help from Posit Conf workshop instructors and colleagues in my new position at Utah State University. Additional resources will be provided where relevant in each section.

- "Introduction to Data Science with Python" workshop
- "Machine Learning and Deep Learning with Python" workshop
- Materials in DATA 5600, 3300, and 3500, including Pedram's YouTube?

## Mindset

When you start working with Python, it's essential that you approach it with the right mindset. R is a specialized language developed by statisticians for data analysis. Python is a *big* tent, a general programming language developed by computer scientists for many things, with only a small portion of it dedicated to data analysis.

:::: {.columns}

::: {.column width="50%"}
### Python

::: {.incremental}
- General language
- Developed by computer scientists
- Obsessed with efficiency
- Obsessed with namespacing
- Object-oriented programming
- Small, medium, and large data
- Machine learning and deep learning
- Spacing is part of the syntax
- No single authority
- Jupyter Notebooks
- Inconsistent (i.e., no tidyverse)
- "Pythonistas" and "Pythonic" code
:::
:::

::: {.column width="50%"}
### R

::: {.incremental}
- Specialized language
- Developed by statisticians
- Lazy about efficiency
- Lazy about namespacing
- Functional programming
- Small and medium data
- Data wrangling and visualization
- Spacing is for convenience
- Dominated by Posit
- R Markdown and Quarto
- Consistency in the tidyverse
- "R Users" and "Tidy" code
:::
:::

::::

::: {.callout-tip title="CLI"}
Learning to be okay with command line for installation.
:::

## Installation, IDEs, and virtual environments

- pyenv and pip or uv and venv or pdm?
- Positron or VS Code.
- Reference my own reproducible environments post, but expand on the callouts just for Python.

Positron issues:

- In a Quarto document, running Python line-by-line jumps to the end of a cell. Not an issue in a .py script.
- Issue with getting Python and R to render in a Quarto document. Requires reticulate? Does Positron effect this?

::: {.callout-tip title="Python with VS Code"}
Sidebar with directions for setting up how to use Python in VS Code.
:::

## Python essentials

- [Base Python Rgonomic Patterns](https://emilyriederer.netlify.app/post/py-rgo-base/)
- Code relies on white space not braces.
- Everything is an object, including imported modules (a module is a single file, while a package is a collection of modules in a directory).
- The assignment (or *binding*) operator is `=`.
- Attached functions called *methods* use the `.` notation following the object, `obj.some_method(x, y, z)`. Note that CmdStanR adopts this syntax. For example `model$sample()` in CmdStanR is `model.sample()` in CmdStanPy.
- Lists are the fundamental data class and are created with single square brackets.
- Objects aren't copied needlessly, they are just bound to the same underlying data structure.
- Many objects or *mutable*. Their contents can be changed.
- **Remember that Python is zero-indexed.**
- `NULL` is referred to as `None`. Other types include `str`, `bytes` (binary), `float`, `bool`, and `int`.

## The PyData stack

The Python data (i.e., PyData) stack refers to the ecosystem of packages that enables data analysis.

- NumPy is short for "Numerical Python." It includes arrays and efficient computation across arrays.
- pandas is short for "panel data." It is built on NumPy and adds data frames for tabular or "heterogeneous" data and is the most popular package for data wrangling.
- Polars is a newer package for data wrangling. It's name is an anagram of the query engine it uses (OLAP) and the language it's built in (Rust or rs).
- matplotlib provides a foundation for plotting.
- seaborn is built on matplotlib and integrates with pandas. seaborn.objects is a more consistent API based on grammar of graphics.
- scikit-learn is a machine learning library built on NumPy, SciPy, and matplotlib.

## Data wrangling

Polars. A Rust library with Python bindings. A query engine with a data frame API on top. Something of an answer to pandas problems. The backend is in Rust instead of NumPy. Built on chaining expressions inside contexts instead of working on Series. Good with small and medium data. Everything stored in Arrow formats, including improvements for storing strings. No row indices. Lazy instead of eager evaluation, including a benefit for chaining.

- Effective Polars?
- [Polarsâ€™ Rgonomic Patterns](https://emilyriederer.netlify.app/post/py-rgo-polars/)
- [A tidyverse R and polars Python side-by-side](https://robertmitchellv.com/blog/2022-07-r-python-side-by-side/r-python-side-by-side.html)
- [Tidy Data Manipulation: dplyr vs pandas](https://blog.tidy-intelligence.com/posts/dplyr-vs-pandas/)
- [Tidy Data Manipulation: dplyr vs polars](https://blog.tidy-intelligence.com/posts/dplyr-vs-polars/)

### Load libraries and data

Packages (i.e., libraries) and modules (i.e., a kind of sub-library) are imported with **aliases**. When you use functions from a package, you reference `package.function()`. This is like `package::function()` in R.

Everything is an object. Depending on the object *type* you have access to their corresponding:

- **attributes** as in `object.attribute`
- **methods**, which are object-specific functions, as in `object.method()`

::: {.panel-tabset .scrollable}
### Python

```{python}
#| eval: false
import polars as pl
import polars.selectors as cs

customer_data = pl.read_csv('posts/python-intro/data/customer_data.csv')
customer_data.shape
customer_data.columns
```

### R

```{r}
#| eval: false
library(tidyverse)

customer_data <- read_csv("posts/python-intro/data/customer_data.csv")

glimpse(customer_data)
```
:::

### Filter observations

Polars **DataFrames** have methods that are similar to {dplyr} since they're both mirroring SQL. DataFrames are composed of columns called **Series** (i.e., equivalent to vectors). Unlike pandas DataFrames, Polars DataFrames don't have a **row index**.

We would reference column names with `data['column_name']` (like R's `data$column_name` or `data["column_name"]` or just `column_name` with tidyeval), but Polars allows for `pl.col('column_name')`.

We use quotation marks for every column name.

::: {.panel-tabset .scrollable}
### Python

```{python}
#| eval: false
customer_data.filter(pl.col('college_degree') == 'Yes')
customer_data.filter(pl.col('region') != 'West')
customer_data.filter(pl.col('gender') != 'Female', pl.col('income') > 70000)
```

### R

```{r}
#| eval: false
filter(customer_data, college_degree == "Yes")

filter(customer_data, region != "West")

filter(customer_data, gender == "Female", income > 70000)
```
:::

### Slice observations

Python is **zero-indexed**. This is probably the most problematic (and very computer science-based) difference and why it's nice to avoid indexing if you can!

The parameters for Polars' `.slice()` are the start index and the length.

::: {.panel-tabset .scrollable}
### Python

```{python}
#| eval: false
customer_data.slice(0, 5)
```

### R

```{r}
#| eval: false
slice(customer_data, 1:5)
```
:::

### Sort observations

It can be strange at first, but **namespacing** is critical.

- A function is preceded by the package name (e.g., `pl.col()`), unless you import the specific function (e.g., `from polars import col`).
- A method is preceded by an object name of a certain type (e.g., `customer_data.sort()`).
- Since object types are tied to packages, the chain back to the corresponding package is always present, explicitly or implicitly.

Note that its `True` and `False`, not `TRUE` and `FALSE` or `true` and `false`.

::: {.panel-tabset .scrollable}
### Python

```{python}
#| eval: false
customer_data.sort(pl.col('birth_year'))
customer_data.sort(pl.col('birth_year'), descending=True)
```

### R

```{r}
#| eval: false
arrange(customer_data, birth_year)

arrange(customer_data, desc(birth_year))
```
:::

### Select variables

Using single square brackets `[ ]` creates a **list**. This is similar to creating a vector in R with `c()`. A list is a fundamental Python object type and can be turned into a Series.

Function (and method) arguments are also called **parameters**.

- Some parameters are **positional** that have to be specified in the exact position.
- Others are **keyword or named** (like in R).

::: {.panel-tabset .scrollable}
### Python

```{python}
#| eval: false
customer_data.select(pl.col('region'), pl.col('review_text'))
customer_data.select(pl.col(['region', 'review_text']))
```

### R

```{r}
#| eval: false
select(customer_data, region, review_text)
```
:::

### Mutate variables

Polars is actually a query language, like SQL. So it's not surprising to see methods with names that more closely mirror queries, like the `.with_columns()` method.

::: {.panel-tabset .scrollable}
### Python

```{python}
#| eval: false
customer_data.with_columns(income = pl.col('income') / 1000)
```

### R

```{r}
#| eval: false
mutate(customer_data, income = income / 1000)
```
:::

### Join data frames

Missing values are identified as `NaN`. Series types include `str`, `bytes` (binary), `float`, `bool`, and `int`.

::: {.panel-tabset .scrollable}
### Python

```{python}
#| eval: false
store_transactions = pl.read_csv('posts/python-intro/data/store_transactions.csv')
store_transactions.shape
store_transactions.columns

customer_data.join(store_transactions, on='customer_id', how='left')
customer_data.join(store_transactions, on='customer_id', how='inner')
```

### R

```{r}
#| eval: false
store_transactions <- read_csv("posts/python-intro/data/store_transactions.csv")

glimpse(store_transactions)

left_join(customer_data, store_transactions, join_by(customer_id))

inner_join(customer_data, store_transactions, join_by(customer_id))
```
:::

### Consecutive lines of code

While possible with Python code generally, Polars embraces writing consecutive lines of code using **method chaining**. Note that:

- The entire chain needs to be surrounded with `( )`
- Each line *starts* with `.`
- You'll have to select and run the whole thing at once

::: {.panel-tabset .scrollable}
### Python

```{python}
#| eval: false
(customer_data
 .join(store_transactions, on='customer_id', how='left')
 .filter(pl.col('region') == 'West', pl.col('feb_2005') == pl.col('feb_2005').max())
 .with_columns(age = 2024 - pl.col('birth_year'))
 .select(pl.col(['age', 'feb_2005']))
 .sort(pl.col('age'), descending=True)
 .slice(0, 1)
)
```

### R

```{r}
#| eval: false
customer_data |> 
  left_join(store_transactions, join_by(customer_id)) |> 
  filter(region == "West", feb_2005 == max(feb_2005)) |> 
  mutate(age = 2024 - birth_year) |> 
  select(age, feb_2005) |> 
  arrange(desc(age)) |> 
  slice(1)
```
:::

### Summarize discrete data

The `.agg()` method stands for *aggregate*, which is exactly what `summarize()` does in R.

::: {.panel-tabset .scrollable}
### Python

```{python}
#| eval: false
(customer_data
 .group_by(pl.col('region'))
 .agg(n = pl.len())
)

(customer_data
 .group_by(pl.col(['region', 'college_degree']))
 .agg(n = pl.len())
)
```

### R

```{r}
#| eval: false
customer_data |> 
  count(region)

customer_data |> 
  count(region, college_degree)
```
:::

### Summarize continuous data

This is a good example of where object-oriented programming requires a different mindset.

- You might think that there is a general `mean()` function like in R, but there isn't and you'd have to load a specific package from the PyData stack and reference its namespace to activate such a function.
- Instead, `.mean()` is a method for Polars Series and DataFrames.

::: {.panel-tabset .scrollable}
### Python

```{python}
#| eval: false
(customer_data
  .select(pl.col('income'))
  .mean()
)

(customer_data
  .select(pl.col(['income', 'credit']))
  .mean()
)
```

### R

```{r}
#| eval: false
customer_data |>
  summarize(avg_income = mean(income))

customer_data |>
  summarize(
    avg_income = mean(income),
    avg_credit = mean(credit)
  )
```
:::

### Summarize discrete and continuous Data

We only use `.agg()` with `.group_by()`.

::: {.panel-tabset .scrollable}
### Python

```{python}
#| eval: false
(customer_data
 .group_by(pl.col(['gender', 'region']))
 .agg(
   n = pl.len(), 
   avg_income = pl.col('income').mean(), 
   avg_credit = pl.col('credit').mean()
  )
 .sort(pl.col('avg_income'), descending=True)
)
```

### R

```{r}
#| eval: false
customer_data |>
  group_by(gender, region) |>
  summarize(
    n = n(),
    avg_income = mean(income),
    avg_credit = mean(credit)
  ) |> 
  arrange(desc(avg_income))
```
:::

## Visualization

seaborn is a high-level interface to matplotlib that was originally focused on filling gaps in matplotlibâ€™s feature set, but now seaborn.objects is more based on the underlying grammar of graphics.

- Start with a .Plot().
- Add layers from the four families of methods: .Mark(), .Stat(), .Move(), .Scale().

- Walkthrough?
- [Tidy Data Visualization: ggplot2 vs seaborn](https://blog.tidy-intelligence.com/posts/ggplot2-vs-seaborn/)
- [Tidy Data Visualization: ggplot2 vs matplotlib](https://blog.tidy-intelligence.com/posts/ggplot2-vs-matplotlib/)
- [Matplotlib](https://matplotlib.org/stable/users/explain/figure/api_interfaces.html#matplotlib-application-interfaces-apis)

> The code in the blog post referenced uses the implicit interface, where you operate directly on plt.XXXXX, versus the explicit interface where you generate an axis and figure fig, ax = plt.subplots(). While using the implicit interface, Positron allows you to iterate on a single plot, which is the behavior you're seeing. There are a few options to tell matplotlib that you are operating on a different figure:
> 
> - add plt.clf() between each plt.show() call. This will not give you the film strip in Positron, since youâ€™re essentially working on the same plot, but it will clear the plot so you donâ€™t have one mega plot ðŸ‘¾
> - update the code to be in the explicit interface, which would consist of adding fig, ax = plt.subplots() to denote the creation of a new plot. Most anywhere you're doing something like plt.bar(...) would need to be update to ax.bar(...). You should still be able to use plt.show() to show all the figures.

## Modeling

scikitlearn, PyMC, etc.

- Walkthrough?

## Communication

In learning Python find something that provides real value quickly. This is the pitch for Shiny for Python. It has programmatic range with a consistent philosophy with reactivity. Streamlit is optimized for simple applications, like a parameterized Quarto document. Dash is built on stateless applications (i.e., independent components), like Shiny without reactive expressions where the different pieces canâ€™t communicate. Django/Flask/FastAPI is great for large apps.

- Quarto or/and Jupyter Notebooks.
- Quarto is plain text while Jupyter has a rich-text format.
- Can you render Jupyter Notebooks into Word, etc.?
- Can you somehow run line-by-line inside of cells, or is the RTF messing with the script?

Also, the Great Tables library!

>One thing I love to share with them is that fast.ai is built:
>- entirely with Quarto
>- entirely out of .ipynb files
>
>`quarto convert` can be used to go back and forth between .ipynb and .qmd!
>
>Yes, that totally works. In addition, quarto render a-notebook.ipynb works out of the box, so you don't even need to convert
>It works both for notebooks that have been created in a different environment (and so can't be re-executed because the results are only possible to produce in, say, google colab), and for notebook that you want to re-execute at every rendering. (quarto render notebook.ipynb vs quarto render notebook.ipynb --execute) Our documentation has https://quarto.org/docs/tools/jupyter-lab.html.
>
>And if your folks really love the JupyterLab authoring experience, we have a JupyterLab extension that makes it a little easier to create ipynb files that work well with Quarto: https://quarto.org/docs/tools/jupyter-lab-extension.html.
>
>Is it possible to render an .ipynb using Quarto (after adding a yaml raw block) from a Jupyter Notebook? Or does it have to be within an IDE? I have colleagues who have used nbconvert to create pdfs via latex and they're wondering if it's possible to use Quarto's typst integration to go straight from .ipynb (not viewed in an IDE) to producing a pdf via typst. The workflow here is working in a Jupyter Notebook hosted on a Jupyter Hub.
>
>yes - that should be totally possible. quarto render nb.ipynb should just work.

- Shiny for Python?
- Walkthrough?

## Final thoughts

Conclude...and follow-up with advanced ____ for the R user?

