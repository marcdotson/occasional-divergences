{
  "hash": "0d384ce12cde8ca259ca57a44f79f63b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Untitled\"\nformat: html\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(tidymodels)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching packages ────────────────────────────────────── tidymodels 1.3.0 ──\n✔ broom        1.0.7     ✔ rsample      1.2.1\n✔ dials        1.4.0     ✔ tune         1.3.0\n✔ infer        1.0.7     ✔ workflows    1.2.0\n✔ modeldata    1.4.0     ✔ workflowsets 1.1.0\n✔ parsnip      1.3.0     ✔ yardstick    1.3.2\n✔ recipes      1.1.1     \n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n```\n\n\n:::\n\n```{.r .cell-code}\n# Set seed, variable, and parameter values.\nset.seed(42)\nnobs <- 500\nbeta0 <- -5\nbeta1 <- 5\nbeta2 <- 2\nbeta3 <- 0\n\n# Simulate data.\nsim_data <- tibble(\n  x1 = round(runif(nobs, min = 0, max = 20)),\n  x2 = rbinom(nobs, size = 2, prob = c(0.7, 0.3)) |> \n    as.factor() |> fct_recode(\"level01\" = \"0\", \"level02\" = \"1\", \"level03\" = \"2\"),\n  y = beta0 + beta1 * x1 + beta2 * ifelse(x2 == \"level02\", 1, 0) + beta3 * ifelse(x2 == \"level03\", 1, 0) + rnorm(nobs, mean = 0, sd = 3)\n)\n\n# Training and testing split.\nsim_split <- initial_split(sim_data, prop = 0.90)\n\n# Feature engineering.\nsim_recipe <- training(sim_split) |>\n  recipe(y ~ .) |> \n  step_dummy(all_nominal_predictors())\n\n# Model specification.\nsim_lm <- linear_reg() |> \n  set_engine(\"lm\")\n\n# Compose a workflow.\nsim_wf_lm <- workflow() |> \n  add_recipe(sim_recipe) |> \n  add_model(sim_lm)\n\n# Fit the model.\nsim_lm_fit <- fit(sim_wf_lm, data = training(sim_split))\n\n# Visualize slope parameter estimates.\ntidy(sim_lm_fit, conf.int = TRUE) |> \n  ggplot(aes(x = term)) + \n  geom_point(aes(y = estimate)) + \n  geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = .1) +\n  geom_hline(yintercept = 0, color = \"red\")\n```\n\n::: {.cell-output-display}\n![](test_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Compute RMSE.\nsim_lm_fit |> \n  predict(new_data = testing(sim_split)) |>\n  bind_cols(testing(sim_split)) |>\n  rmse(truth = y, estimate = .pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rmse    standard        3.16\n```\n\n\n:::\n\n```{.r .cell-code}\n# Column names need to match the original data.\nnew_data <- tibble(\n  x1 = rep(c(10, 20, 30, 40), 3),\n  x2 = c(rep(\"level01\", 4), rep(\"level02\", 4), rep(\"level03\", 4))\n)\n\n# Predict and bind on prediction intervals.\npredict(sim_lm_fit, new_data = new_data) |> \n  bind_cols(\n    predict(sim_lm_fit, new_data = new_data, type = \"pred_int\"),\n    new_data\n  ) |> \n  arrange(desc(.pred))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 5\n   .pred .pred_lower .pred_upper    x1 x2     \n   <dbl>       <dbl>       <dbl> <dbl> <chr>  \n 1 198.        192.        205.     40 level02\n 2 196.        190.        202.     40 level01\n 3 195.        189.        202.     40 level03\n 4 148.        142.        154.     30 level02\n 5 146.        139.        152.     30 level01\n 6 145.        139.        151.     30 level03\n 7  97.6        91.5       104.     20 level02\n 8  95.3        89.2       101.     20 level01\n 9  94.7        88.6       101.     20 level03\n10  47.3        41.2        53.3    10 level02\n11  44.9        38.8        51.0    10 level01\n12  44.4        38.3        50.4    10 level03\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "test_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}